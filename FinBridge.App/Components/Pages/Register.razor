@page "/register"

@using Microsoft.AspNetCore.Components.Forms
@using FinBridge.App.Models
@using FinBridge.App.Services
@using System.Text.RegularExpressions

@inject NavigationManager Navigation
@inject IAuthenticationService authService

<div class="app-background">
    <button class="back-button" @onclick="GoBack">
        <span class="back-arrow">←</span> Назад
    </button>

    <div class="app-icon"></div>

    <h3>Създаване на профил</h3>

    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Въведе първото Ви име:</label>
            <InputText @bind-Value="registerModel.FirstName" class="input-field" placeholder="Например: Иван" />
        </div>

        <div class="form-group">
            <label>Въведе вашето презиме:</label>
            <InputText @bind-Value="registerModel.MiddleName" class="input-field" placeholder="Например: Горанов" />
        </div>

        <div class="form-group">
            <label>Въведете вашата фамилия:</label>
            <InputText @bind-Value="registerModel.LastName" class="input-field" placeholder="например: Цветанков" />
        </div>

        <div class="form-group">
            <label>Въведете вашият имейл:</label>
            <InputText @bind-Value="registerModel.Email" class="input-field" placeholder="example@example.com" />
        </div>

        <div class="form-group">
            <label>Въведе измислена от вас парола:</label>
            <InputText @bind-Value="registerModel.Password" 
                     type="password" 
                     class="@($"input-field {(IsPasswordValid ? "valid" : "")}")" 
                     @onfocus="ShowValidationList"
                     @onblur="HideValidationList"
                     @oninput="UpdateValidation" />
            <div class="form-group">
                <div class="password-validation-container">          
                    <div class="password-validation-list @(showValidation ? "show" : "")">
                        <div class="validation-item">
                            @if (IsPasswordLengthValid)
                            {
                                <span class="check-icon">✓</span>
                            }
                            else
                            {
                                <span class="x-icon">✕</span>
                            }
                            <span>Паролата трябва да е поне 6 символа</span>
                        </div>
                        <div class="validation-item">
                            @if (HasUppercase)
                            {
                                <span class="check-icon">✓</span>
                            }
                            else
                            {
                                <span class="x-icon">✕</span>
                            }
                            <span>Паролата трябва да съдържа главни букви</span>
                        </div>
                        <div class="validation-item">
                            @if (HasSpecialChars)
                            {
                                <span class="check-icon">✓</span>
                            }
                            else
                            {
                                <span class="x-icon">✕</span>
                            }
                            <span>Паролата трябва да съдържа специални символи</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label>Потвърдете измислената от вас парола:</label>
            <InputText @bind-Value="registerModel.ConfirmPassword" 
                     type="password" 
                     class="@($"input-field {(IsPasswordConfirmed ? "valid" : "")}")"
                     @oninput="UpdateConfirmPassword" />
        </div>

        <div class="checkbox-wrapper" @onclick="ToggleRememberMe">
            <InputCheckbox @bind-Value="registerModel.RememberMe" />
            <label>Запомни ме</label>
        </div>

        <button type="submit" disabled="@isSubmitting">Регистрирайте се</button>
    </EditForm>

    <p>
        Вече имате акаунт?
        <a @onclick="NavigateToLogin">Влезте в профила си</a>
    </p>
</div>

@code {
    private RegisterRequest registerModel = new();
    private bool isSubmitting;
    private bool showValidation;

    private bool IsPasswordLengthValid => !string.IsNullOrEmpty(registerModel.Password) && registerModel.Password.Length >= 6;
    private bool HasUppercase => !string.IsNullOrEmpty(registerModel.Password) && registerModel.Password.Any(char.IsUpper);
    private bool HasSpecialChars => !string.IsNullOrEmpty(registerModel.Password) && 
                                  Regex.IsMatch(registerModel.Password, @"[!@#$%^&*(),.?""':{}|<>]");
    
    private bool IsPasswordValid => IsPasswordLengthValid && HasUppercase && HasSpecialChars;
    private bool IsPasswordConfirmed => !string.IsNullOrEmpty(registerModel.ConfirmPassword) && 
                                      registerModel.Password == registerModel.ConfirmPassword;

    private void ShowValidationList()
    {
        showValidation = true;
    }

    private void HideValidationList()
    {
        showValidation = false;
    }

    private void UpdateValidation(ChangeEventArgs e)
    {
        registerModel.Password = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void UpdateConfirmPassword(ChangeEventArgs e)
    {
        registerModel.ConfirmPassword = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void ToggleRememberMe()
    {
        registerModel.RememberMe = !registerModel.RememberMe;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/startup");
    }

    private async Task HandleRegister()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            var result = await authService.RegisterAsync(registerModel);
            
            if (result)
            {
                Navigation.NavigateTo("/home");
            }
            else
            {
                // TODO: Add proper error handling/display
                Console.WriteLine("Authentication failed.");
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
